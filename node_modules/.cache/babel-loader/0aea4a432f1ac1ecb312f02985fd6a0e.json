{"ast":null,"code":"var _jsxFileName = \"/home/tarcisio/pages/rickandmort/src/components/Inputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Form } from 'react-bootstrap';\nimport MainContext from '../context/MainContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Inputs() {\n  _s();\n\n  const {\n    setSearchName\n  } = useContext(MainContext);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Pesquisa combinada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Pesquise por nome e diga se o personagem est\\xE1 vivo ou morto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Nome do personagem\",\n        onChange: e => setSearchName(e.target.value.toLowerCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Inputs, \"8CQSm74ZM4zOQbFsQLSMNgFNOxw=\");\n\n_c = Inputs;\nexport default Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["/home/tarcisio/pages/rickandmort/src/components/Inputs.js"],"names":["React","useContext","Form","MainContext","Inputs","setSearchName","e","target","value","toLowerCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAoBJ,UAAU,CAACE,WAAD,CAApC;AACA,sBACE;AAAA,4BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAS,MAAA,SAAS,EAAC,QAAnB;AAAA,8BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADL,eAEK,QAAC,IAAD,CAAM,OAAN;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,WAAW,EAAC,oBAFb;AAGC,QAAA,QAAQ,EAAIG,CAAD,IAAOD,aAAa,CAAEC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAiBC,WAAjB,EAAD;AAHhC;AAAA;AAAA;AAAA;AAAA,cAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAlCQL,M;;KAAAA,M;AAoCT,eAAeA,MAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Form } from 'react-bootstrap';\nimport MainContext from '../context/MainContext';\n\nfunction Inputs() {\n  const { setSearchName } = useContext(MainContext);\n  return (\n    <section>\n        {/* <p> Explorar aleatoriamente por página:</p>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"Número da página\" \n          onChange={ (e) => setNewPersons(e.target.value) }\n          min=\"1\"\n        /> */}\n        <h3>Pesquisa combinada</h3>\n        <section className=\"inputs\">\n             <p> Pesquise por nome e diga se o personagem está vivo ou morto</p>\n             <Form.Control\n              type=\"text\"\n              placeholder=\"Nome do personagem\"\n              onChange={ (e) => setSearchName((e.target.value).toLowerCase()) }\n             />\n            {/* <FloatingLabel controlId=\"floatingSelect\">\n              <Form.Select\n                aria-label=\"alive, dead or unknow\"\n                onChange={ (e) => setSearchStatus(e.target.value) }\n              >\n              <option>Status</option>\n              <option value=\"alive\"> Alive </option>\n              <option value=\"dead\"> Dead </option>\n              <option value=\"unknow\"> Unknow </option>\n            </Form.Select>\n            <p>{ searchName.toUpperCase() } { searchStatus.toUpperCase() }</p>\n          </FloatingLabel> */}\n        </section>\n    </section>\n  );\n}\n\nexport default Inputs;\n"]},"metadata":{},"sourceType":"module"}