{"ast":null,"code":"var _jsxFileName = \"/home/tarcisio/trybe_exercises/rickandmortpage/rickandmort/src/context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MainContext from './MainContext';\nimport { getNamePersons, getNewPersons } from '../services/SearchAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [persons, setPersons] = useState([]);\n  const [newPersons, setNewPersons] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [searchStatus, setSearchStatus] = useState('');\n\n  async function getNewCharacter() {\n    const {\n      results\n    } = await getNewPersons(newPersons);\n    setPersons(results);\n  }\n\n  async function getNameCharacter() {\n    const {\n      results\n    } = await getNamePersons(searchName);\n    setPersons(results);\n  }\n\n  const context = {\n    persons,\n    setPersons,\n    newPersons,\n    setNewPersons,\n    searchName,\n    setSearchName,\n    searchStatus,\n    setSearchStatus,\n    getNewCharacter,\n    getNameCharacter\n  };\n  return /*#__PURE__*/_jsxDEV(MainContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"UJEeKQeaNbFV4efcnqmVAc8ClLM=\");\n\n_c = Provider;\nexport default Provider;\nProvider.propTypes = {\n  children: PropTypes.array\n}.isRequired;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/tarcisio/trybe_exercises/rickandmortpage/rickandmort/src/context/Provider.js"],"names":["React","useState","PropTypes","MainContext","getNamePersons","getNewPersons","Provider","children","persons","setPersons","newPersons","setNewPersons","searchName","setSearchName","searchStatus","setSearchStatus","getNewCharacter","results","getNameCharacter","context","propTypes","array","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,uBAA9C;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;;AAEA,iBAAee,eAAf,GAAiC;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMZ,aAAa,CAACK,UAAD,CAAvC;AACAD,IAAAA,UAAU,CAACQ,OAAD,CAAV;AACD;;AAED,iBAAeC,gBAAf,GAAkC;AAChC,UAAM;AAAED,MAAAA;AAAF,QAAc,MAAMb,cAAc,CAACQ,UAAD,CAAxC;AACAH,IAAAA,UAAU,CAACQ,OAAD,CAAV;AACD;;AACD,QAAME,OAAO,GAAG;AACdX,IAAAA,OADc;AAEdC,IAAAA,UAFc;AAGdC,IAAAA,UAHc;AAIdC,IAAAA,aAJc;AAKdC,IAAAA,UALc;AAMdC,IAAAA,aANc;AAOdC,IAAAA,YAPc;AAQdC,IAAAA,eARc;AASdC,IAAAA,eATc;AAUdE,IAAAA;AAVc,GAAhB;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAGC,OAA9B;AAAA,cACGZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjCD;;GAAMD,Q;;KAAAA,Q;AAmCN,eAAeA,QAAf;AAEAA,QAAQ,CAACc,SAAT,GAAqB;AACnBb,EAAAA,QAAQ,EAAEL,SAAS,CAACmB;AADD,EAEnBC,UAFF","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MainContext from './MainContext';\nimport { getNamePersons, getNewPersons } from '../services/SearchAPI';\n\nconst Provider = ({ children }) => {\n  const [persons, setPersons] = useState([]);\n  const [newPersons, setNewPersons] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [searchStatus, setSearchStatus] = useState('');\n\n  async function getNewCharacter() {\n    const { results } = await getNewPersons(newPersons);\n    setPersons(results);\n  }\n\n  async function getNameCharacter() {\n    const { results } = await getNamePersons(searchName);\n    setPersons(results);\n  }\n  const context = {\n    persons,\n    setPersons,\n    newPersons,\n    setNewPersons,\n    searchName,\n    setSearchName,\n    searchStatus,\n    setSearchStatus,\n    getNewCharacter,\n    getNameCharacter,\n  };\n\n  return (\n    <MainContext.Provider value={ context }>\n      {children}\n    </MainContext.Provider>\n  );\n};\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.array,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}